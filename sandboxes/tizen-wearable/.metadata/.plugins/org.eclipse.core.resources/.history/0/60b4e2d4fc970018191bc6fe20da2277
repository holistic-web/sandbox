<!DOCTYPE html>
<html>
<head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0, maximum-scale=1.0">
    <meta name="description" content="Tizen Wearable Web Widget template generated by Samsung Wearable Web IDE"/>

    <title>Tizen Wearable Web IDE - Tizen Wearable - Tizen Wearable Web Widget Application</title>
	<style>
		* {font-family: Verdana, Lucida Sans, Arial, Helvetica, sans-serif;}
		body {margin: 20px 20px; background-color:#222;}
		.contents {display: flex; display: -webkit-flex; box-sizing: border-box; -webkit-box-sizing: border-box; height:320px;}
		.content_text {font-weight:bold; font-size:2em;	color:#fff;}
	</style>
	<script src="./script.js"></script>
</head>

<body>
<div class=contents>
	<div style="margin:auto;">
		<span class="content_text" id="locationInfo"></span>
		<br>
		<span class="content_text" id="data"></span>
		<br>
		---
		<br>
		<span class="content_text" id="error"></span>
	</div>
</div>

<script>
window.onload = function () {
	document.addEventListener('tizenhwkey', function(e) {
		if(e.keyName === "back") {
			try {
				tizen.application.getCurrentApplication().exit();
			} catch (ignore) {
			}
		}
	});
	try {
		getLocation();
		getData();
	} catch (err) {
		writeError(err);
	}

}

function writeError(errorText) {
	document.getElementById('error').innerHTML = errorText
}

const xhr = new XMLHttpRequest();

async function getData() {
	const url = 'https://asdsa-48c2f.firebaseio.com/tizen.json';
	let response = await fetch(url);
	response = await response.json();
	document.getElementById('data').innerHTML = JSON.stringify(response);
}

async function getLocation() {
	const position = await getCurrentPosition();
	document.getElementById('locationInfo').innerHTML = 'Latitude: ' + position.coords.latitude + '<br/>Longitude: ' + position.coords.longitude;

}

function getCurrentPosition(options = {}) {
	return new Promise((resolve, reject) => {
		navigator.geolocation.getCurrentPosition(resolve, reject, options);
	});
};



function successCallback(position) {
}

function errorCallback(error) {
	var errorInfo = document.getElementById('locationInfo');
	switch (error.code) {
		case error.PERMISSION_DENIED:
			errorInfo.innerHTML = 'User denied the request for Geolocation.';
			break;
		case error.POSITION_UNAVAILABLE:
			errorInfo.innerHTML = 'Location information is unavailable.';
			break;
		case error.TIMEOUT:
			errorInfo.innerHTML = 'The request to get user location timed out.';
			break;
		case error.UNKNOWN_ERROR:
			errorInfo.innerHTML = 'An unknown error occurred.';
			break;
	}
}</script>
</body>
</html>
